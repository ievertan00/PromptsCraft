import { SQLite3Wasm } from './sqlite3-emscripten';
import { ParameterArray, ParameterMap, ReturnMap, QueryResult, ReturnCode } from './sqlite3-types';
import Statement from './Statement';
export default class Database {
    readonly wasm: SQLite3Wasm;
    private filename;
    private dbPtr;
    private functions;
    statements: {
        [stmtPtr: number]: Statement;
    };
    constructor(wasm: SQLite3Wasm, data?: ArrayBufferView);
    run(sql: string, params?: ParameterArray | ParameterMap): this;
    exec(sql: string): QueryResult[];
    each(sql: string, callback: (row: ReturnMap) => void): this;
    each(sql: string, callback: (row: ReturnMap) => void, done: () => any): ReturnType<typeof done>;
    each(sql: string, params: ParameterArray | ParameterMap, callback: (row: ReturnMap) => void): this;
    each(sql: string, params: ParameterArray | ParameterMap, callback: (row: ReturnMap) => void, done: () => any): ReturnType<typeof done>;
    prepare(sql: string, params?: ParameterArray | ParameterMap): Statement;
    private _close;
    export(): Uint8Array;
    close(): void;
    handleError(returnCode: ReturnCode): boolean;
    getRowsModified(): any;
    createFunction(name: string, func: Function): this;
}
//# sourceMappingURL=Database.d.ts.map